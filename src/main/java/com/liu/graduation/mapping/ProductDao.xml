<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.liu.graduation.dao.ProductDao">
	<resultMap id="BaseResultMap" type="com.liu.graduation.entities.Product" >
 
	    <id column="id" property="id" jdbcType="INTEGER" />
	    <result column="name" property="name" jdbcType="VARCHAR" />
	    <result column="price" property="price" jdbcType="FLOAT" />
		<result column="stock" property="stock" jdbcType="INTEGER" />   
		<result column="attr" property="attr" jdbcType="INTEGER" /> 
		<result column="src" property="src" jdbcType="LONGVARCHAR" />
	    <result column="summernote" property="summernote" jdbcType="LONGVARCHAR" />
	    <result column="addtime" property="addtime" jdbcType="TIMESTAMP" />
	    <result column="endtime" property="endtime" jdbcType="TIMESTAMP" />
  	</resultMap>
  	
    <insert id="insertProduct" parameterType="com.liu.graduation.entities.Product" >
    
    insert into product
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >id,</if>
      <if test="name != null" >name,</if>
      <if test="price != null" >price,</if>
      <if test="stock != null" >stock,</if>
      <if test="attr != null" >attr,</if>
      <if test="src != null" >src,</if>
      <if test="summernote != null" >summernote,</if>
      <if test="addtime != null" >addtime,</if>
      <if test="endtime != null" >endtime,</if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="price != null" >
        #{price,jdbcType=FLOAT},
      </if>
       <if test="stock != null" >
      	#{stock,jdbcType=INTEGER},
      </if>
      <if test="attr != null" >
      	#{attr,jdbcType=INTEGER},
      </if>
      <if test="src != null" >
      	#{src,jdbcType=LONGVARCHAR},
      </if>
      <if test="summernote != null" >
      #{summernote,jdbcType=LONGVARCHAR},
      </if>
     <if test="addtime != null" >
      #{addtime,jdbcType=TIMESTAMP},
      </if>    
      <if test="endtime != null" >
      #{endtime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="checkProductById" resultType="int">
  		select count(*)
  		from product
  		where id=#{id} and endtime is null
  </select>
  <select id="selectProductById" resultMap="BaseResultMap" parameterType="java.lang.String">
        select * from product_info
        where id=#{id}
    </select>
    <select id="queryProductByPage" resultMap="BaseResultMap" parameterType="com.liu.graduation.entities.Product">
        SELECT p.id,p.name,p.price,p.src,p.stock,a.name AS attr,p.summernote,p.addtime,p.endtime 
		from product p join attr a ON p.attr=a.id
        where 
			1
	      <if test="id != null">
	        AND id like CONCAT('%', #{id,jdbcType=VARCHAR},'%')    
	      </if>
	      <if test="name != null">
	        AND t_item.title like CONCAT('%', #{dvdTitle,jdbcType=VARCHAR},'%')  
	      </if>
	      <if test="attr != null">
	        AND attr =#{attr,jdbcType=INTEGER} 
	      </if>
	      AND endtime is null 
        order by addtime desc
    </select>
    
    <select id="countProductByInfo"
		resultType="int"
		parameterType="com.liu.graduation.entities.Product" >
	    select 
	      count(id) 
	    from
	      product
	    where 
			1
	      <if test="id != null">
	        AND id like CONCAT('%', #{id,jdbcType=VARCHAR},'%')    
	      </if>
	      <if test="name != null">
	        AND t_item.title like CONCAT('%', #{dvdTitle,jdbcType=VARCHAR},'%')  
	      </if>
	      <if test="attr != null">
	        AND attr =#{attr,jdbcType=INTEGER} 
	      </if>
	      	AND endtime is null 
	</select>
    <update id="deleteProduct" parameterType="com.liu.graduation.entities.Product" >
    	UPDATE product
		SET endtime=#{endtime,jdbcType=TIMESTAMP}
		WHERE id= #{id,jdbcType=VARCHAR}
    </update>
    <update id="deleteImg" parameterType="com.liu.graduation.entities.Product" >
    	UPDATE product
		SET src=REPLACE(src,#{src,jdbcType=LONGVARCHAR},"")
		WHERE id= #{id,jdbcType=VARCHAR}
    </update>
    <update id="updateProduct" parameterType="com.liu.graduation.entities.Product" >
    	UPDATE product
		SET 
		<if test="name != null" >
        name=#{name,jdbcType=VARCHAR},
      </if>
      <if test="price != null" >
        price=#{price,jdbcType=FLOAT},
      </if>
       <if test="stock != null" >
      	stock=#{stock,jdbcType=INTEGER},
      </if>
      <if test="attr != null" >
      	attr=#{attr,jdbcType=INTEGER},
      </if>
      <if test="src != null" >
      	src=CONCAT(src, #{src,jdbcType=LONGVARCHAR}),
      </if>
      <if test="summernote != null" >
      	summernote=#{summernote,jdbcType=LONGVARCHAR},
      </if>
     <if test="addtime != null" >
      addtime =#{addtime,jdbcType=TIMESTAMP}
      </if>
		WHERE id=#{id,jdbcType=VARCHAR}
    </update>
     <select id="countProductBykey"
		resultType="int"
		 >
	    select 
	      count(p.id) 
	    from
	      product p join attr a ON p.attr=a.id
	    where p.endtime is null  
	    <if test="key != null" >
      	and ( p.id like CONCAT('%', #{key},'%') 
	    or a.name like CONCAT('%', #{key},'%') 
	    or p.name like CONCAT('%', #{key},'%')
	    or p.addtime like CONCAT('%', #{key},'%')
	    or p.summernote like CONCAT('%', #{key},'%'))
      	</if> 
      	order by p.addtime desc       
	 </select>
	 <select id="queryProductBykey" resultMap="BaseResultMap" >
        SELECT p.id,p.name,p.price,p.src,p.stock,a.name AS attr,p.summernote,p.addtime,p.endtime 
		from product p join attr a ON p.attr=a.id
		where p.endtime is null  
	    <if test="key != null" >
      	and ( p.id like CONCAT('%', #{key},'%') 
	    or a.name like CONCAT('%', #{key},'%') 
	    or p.name like CONCAT('%', #{key},'%')
	    or p.addtime like CONCAT('%', #{key},'%')
	    or p.summernote like CONCAT('%', #{key},'%') )
      	</if>
 		 order by p.addtime desc
	</select>
	<select id="queryProductAll" resultMap="BaseResultMap" >
        select * from product
        where endtime is null and stock>0
    </select>
    <update id="updateProductStock" parameterType="java.lang.String">
    	
		update product p,(select num,product_id from order_product where order_id=#{order,jdbcType=VARCHAR} ) t
		set stock =stock-t.num,sales=sales+t.num
		WHERE t.product_id=p.id and p.id in (select product_id from order_product where order_id=#{order,jdbcType=VARCHAR})
		    
    </update>
	<select id="findProductById" resultMap="BaseResultMap" parameterType="java.lang.String">
		SELECT p.id,p.name,p.price,p.src,p.stock,a.name AS attr,p.summernote,p.addtime,p.endtime 
		from product p join attr a ON p.attr=a.id
		WHERE p.id=#{id,jdbcType=VARCHAR}
	</select>
	<select id="queryProductBySales" resultMap="BaseResultMap">
		select *
		from product 
		order BY sales desc
		limit #{num,jdbcType=INTEGER}
	</select>
	<select id="countProductByFrom" resultType="int">
		select 
	      count(p.id) 
	    from
	    product p join attr a ON p.attr=a.id
	    where p.endtime is null and stock>0
	     <if test="key != null and key != ''">
	    	and (  p.name like CONCAT('%', #{key},'%')
	    		or p.summernote like CONCAT('%', #{key},'%'))
	    </if>
	    <if test="attr != null and attr != ''">
	    	and a.name like CONCAT('%', #{attr},'%')
	    </if>
	</select>
	<select id="queryProductByFrom" resultType="com.liu.graduation.entities.Product">
		select 
	      p.id,p.name,p.price,p.src,p.stock,a.name AS attr,p.sales
	    from
	    product p join attr a ON p.attr=a.id
	    where p.endtime is null and stock>0
	    <if test="key != null and key != ''">
	    	and (  p.name like CONCAT('%', #{key},'%')
	    		or p.summernote like CONCAT('%', #{key},'%'))
	    </if>
	    <if test="attr != null and attr != ''">
	    	and a.name like CONCAT('%', #{attr},'%')
	    </if>
	    <if test="sort != null and sort != ''">
	    	order by  ${sort} 
	    	<if test="order =='desc'">
	    	desc
	    </if>
	    </if>
	</select>
</mapper>
